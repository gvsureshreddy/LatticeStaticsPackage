#!/usr/bin/perl
#
# Usage: BlochWaveRecalc inputfile gridsize skip <outputfile>
#
use IPC::Open2;
use IO::Handle;

if (scalar(@ARGV) < 3)
{
  die "Usage: BlochWaveRecalc inputfile gridsize skip <outputfile>";
}

$pid = open2(PIPout,PIPin,"BlochWave $ARGV[0] $ARGV[1]");
autoflush PIPin 1;

open(DATA,"<$ARGV[0]") 
    || die "Unable to open $ARGV[0] for read: $!";
if (scalar(@ARGV) == 4)
{
  open(OUTPUT,">$ARGV[3]") || die "Unable to open $ARGV[3] for write: $!";
}
else
{
  open(OUTPUT,">-") || die "Unable to open standard out for write: $!";
}

$skip = $ARGV[2];

$_ = <DATA>;
print OUTPUT $_;

while (! m/^Mode:/)
{
  $_ = <DATA>;
  print OUTPUT $_;
}

$record = "";
$count = 0;

while (<DATA>)
{
  if (/^========/)
  {
    if ($count ==0)
    {
      if ($skip != 0)
      {
	$count = 1;
      }
    }
    else
    {
      $count = 0;
    }
  }

  if (/^Temperature/)
  {
    @fields=split(/:/,$_);
    $Temp = $fields[1];
  }

  if (/^Lambda/)
  {
    @fields=split(/:/,$_);
    $Lambda = $fields[1];
  }
  
  if (/^DOF/)
  {
    print OUTPUT $_;
    $_ = <DATA>;
    @DOF = split;
  }

  if (/^BlochWave/)
  {
    @fields=split(/:/,$_);
    @fields=split(/,/,$fields[1]);
    if ($fields[0] == 1)
    {
      if ($count == 0)
      {
	print PIPin $Temp;
	print PIPin $Lambda;
	for ($i=0;$i<scalar(@DOF);$i+=1)
	{
	  printf PIPin "%25.12f",$DOF[$i];
	}
	print PIPin "\n";

	$newline = <PIPout>;
	print OUTPUT $newline;
	if ($skip != 0)
	{
	  $count += 1;
	}
      }
      else
      {
	print OUTPUT $_;
	$count += 1;
	$count %= $skip;
      }
    }
    else
    {
      print OUTPUT $_;
    }
  }
  else
  {
    print OUTPUT $_;
  }
}

close(PIPin);
close(PIPout);
waitpid($pid,0);

close(OUTPUT);
close(DATA);
