#!/usr/bin/perl -w
#!/usr/um/bin/perl -w
#
#

use Math::Trig;

if (scalar(@ARGV) < 5)
{
  die "Usage: MultiLattice2gpl dofs gplfilename <crystalline|CB|phonon> <cartesian|euler> <file list>\n";
}

$DOFSize = $ARGV[0];
$StateSize = $DOFSize + 9;
$StrSPEC = "%-14s";
$FSPEC = "%14.6f";

if ($ARGV[2] eq "crystalline" || $ARGV[2] eq "CB" || $ARGV[2] eq "phonon")
{
  $StabType = $ARGV[2];
}
else
{
  die "Unknown option of crystallline|CB|phonon : $ARGV[2]\n";
}

if ($ARGV[3] eq "euler" || $ARGV[3] eq "Euler")
{
  $Euler = 1;
}
elsif ($ARGV[3] eq "cartesian" || $ARGV[3] eq "Cartesian")
{
  $Euler = 0;
}
else
{
  die "Unknown option for cartesian|euler : $ARGV[3]\n";
}

for (my $i=4;$i<@ARGV;$i+=1)
{
  if (-e $ARGV[$i])
  {
    push @files, $ARGV[$i];
  }
  else
  {
    print "The file $ARGV[$i] does not exist! --- ignoring.\n";
  }
}

open(GNUPLOT,">$ARGV[1]")
    || die "Unable to open $ARGV[1] for write: $!";

$date = `date`; chomp($date);
$pwd = `pwd`; chomp($pwd);
print GNUPLOT "# gnuplot data file created on $date -- from directory: $pwd\n";
print GNUPLOT "# with command line: MultiLattice2gpl ";
for ($i=0;$i<@ARGV;$i+=1) { print GNUPLOT "$ARGV[$i] ";}
print GNUPLOT "\n#\n";

$index = 0;
foreach $fl (@files)
{
  print "Working on file: $fl\n";
  loaddata($fl,$index,*GNUPLOT);
  $index += 5;
}

close(GNUPLOT);


# Subroutine loaddata.
#    read in data file, print bifurcation points,
#    stable sections, and unstable sections to output file
#
# Note: subroutine leaves current directory changed.
#
# $_[0] -- Data file name
# $_[1] -- Gnuplot data file Index for critical point section
#          Note (stable section is index+1, unstable section index+2)
# $_[2] -- reference to output file
#
sub loaddata {
  my(@fields,@temp,@bifpt,@stress,@conjtostress,@DOF,
     @potential,@entropy,@heatcapacity,@noneg,@blochwave,
     $stableflag,$stable_nodata,$unstable_nodata,$bifpoints,$turnpoints,
     $reconstturnpts,$gridsize,$loadparam,$loadgrad,$oldloadgrad,$recalc,$BWrecalc,
     $outputfl,$FastPrint);
  $outputfl = $_[2];
  $FastPrint = 0;
  $bifheader = "";
  $bif = "";
  $biftmp = "";
  $turnheader = "";
  $turn = "";
  $turntmp = "";
  $reconstturnheader = "";
  $reconstturn = "";
  $reconstturntmp = "";
  $stableheader = "";
  $stable = "";
  $stabletmp = "";
  $unstableheader = "";
  $unstable = "";
  $unstabletmp = "";
  
  my($firststable,$firstunstable);
  
  # flag to make sure there is data in the index
  $stable_nodata = 1;
  $unstable_nodata = 1;
  $bifpoints = 0;
  $turnpoints = 0;
  $reconstturnpts = 0;
  
  if (-e $_[0])
  {
    open(DATA,"gzcat -f $_[0]|") || die "No file: $_[0], $!";
    
    $_ = <DATA>;
    while (! m/^Restriction:/)
    {
      if (/^Input File:.*LoadingParameter/)
      {
        if (/=>/)
        {
          @fields=split(/=>/,$_);
        }
        else
        {
          @fields=split(/=/,$_);
        }
        $fields[1] =~ s/\s+//g;
        $fields[1] =~ s/[,;].*//g;
        if (($fields[1] eq "Temperature") || ($fields[1] eq '"Temperature"'))
        {
          $loadparam=1;
        }
        elsif (($fields[1] eq "Load") || ($fields[1] eq '"Load"'))
        {
          $loadparam=2;
        }
      }
      
      if (/^Input File:.*BlochWaveGridSize/)
      {
        if (/=>/)
        {
          @fields=split(/=>/,$_);
        }
        else
        {
          @fields=split(/=/,$_);
        }
        $fields[1] =~ s/[,;].*//g;
        $gridsize = $fields[1];
      }

      if (/^Input File:.*FastPrint.*Yes/)
      {
        $FastPrint = 1;
      }

      $_ = <DATA>;
    }
    
    while (<DATA>)
    {
      if ( /^===========/)
      {
        $_=<DATA>;
        if ( /^Temperature/)
        {
          @fields=split(/:/,$_);
          push(@temp,$fields[1]);

          push(@bifpt,1);
        }
        $_=<DATA>;
        if (!defined($_))
	{
	  last;
	}
      }
      
      if ( /^Temperature/)
      {
        push(@bifpt,0);
        
        @fields=split(/:/,$_);
        push(@temp,$fields[1]);
      }
      
      if ( /^Lambda/)
      {
        @fields=split(/:/,$_);
        push(@stress,$fields[1]);
      }
      
      if ( /^ConjugateToLambda/)
      {
        @fields=split(/:/,$_);
        push(@conjtostress,$fields[1]);
      }
      
      if ( /^DOF/)
      {
        $_ = <DATA>;
        @fields = split;
        if ($Euler)
        {
          my($i, $temp,@splt);
          $temp = $_;
          open(PRINC,"PrincipalSys $fields[0] $fields[1] $fields[2] $fields[3] $fields[4] $fields[5]|");
          while (<PRINC>)
          {
            @splt = split;
            for ($i=0;$i<6;$i=$i+1)
            {
              $fields[$i] = $splt[$i];
            }
          }
          close(PRINC);
          $_ = $temp;
        }
        push(@DOF,[ @fields ]);

        if ($FastPrint == 1)
        {
          push(@entropy, 0.0);
          push(@heatcapacity, 0.0);
          push(@noneg, 0);
          push(@Convex, 0);
          push(@blochwave,0);
        }
      }
      
      if (/^Potential/)
      {
        @fields = split(/:/,$_);
        push(@potential,$fields[1]);
      }
      
      if ( /^Entropy/)
      {
        @fields=split(/:/,$_);
        push(@entropy,$fields[1]);
      }
      
      if ( /^HeatCapacity/)
      {
        @fields=split(/:/,$_);
        push(@heatcapacity,$fields[1]);
      }
      
      if (/^Bifurcation/)
      {
        @fields = split(/:/,$_);
        $_=$fields[1];
        @fields = split;
        push(@noneg,$fields[1]);
      }
      
      if (/^Condensed Moduli Rank1Convex/)
      {
        @fields = split(/:/,$_);
        push(@Convex,$fields[1]);
      }
      
      if (/^BlochWave/)
      {
        @fields = split(/:/,$_);
        if ($fields[0] =~ /\(GridSize=([0-9]*)\)/)
        {
          if ($1 != $gridsize)
          {
            $recalc=1;
          }
          else
          {
            $recalc=0;
          }
        }
        else
        {
          $recalc=0;
        }
        $_ = $fields[1];
        @fields = split(/,/,$_);
        if ($recalc==1)
        {
          push(@blochwave,$fields[0]);
          $BWrecalc=$fields[0];
        }
        else
        {
          if (($noneg[@noneg-1]==0) && ($fields[0]==1) && defined($BWrecalc))
          {
            push(@blochwave,$BWrecalc);
          }
          else
          {
            push(@blochwave,$fields[0]);
          }
        }
      }
    }
    
    close(DATA);
  }
  else
  {
    print "No file: $_[0]!\n";
  }
  
  $bifheader .= sprintf "# Index $_[1]\n";
  $bifheader .= sprintf "# $_[0] --- Bifurcation Points\n";
  $bifheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
  "# Temperature","Stress","ConjToStress","Potential","Entropy","HeatCapacity";
  for (my $i=0;$i<$DOFSize;$i+=1)
  {
    $bifheader .= sprintf $StrSPEC,"DOF $i";
  }
  $bifheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . "\n",
  "NumNeg TFs","Rk 1 Convex","Blochwave";
  
  $turnheader .= sprintf "# Index " . ($_[1]+1) . "\n";
  $turnheader .= sprintf "# $_[0] --- Turning Points\n";
  $turnheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
  "# Temperature","Stress","ConjToStress","Potential","Entropy","HeatCapacity";
  for (my $i=0;$i<$DOFSize;$i+=1)
  {
    $turnheader .= sprintf $StrSPEC,"DOF $i";
  }
  $turnheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . "\n",
  "NumNeg TFs","Rk 1 Convex","Blochwave";
  
  $reconstturnheader .= sprintf "# Index " . ($_[1]+2) . "\n";
  $reconstturnheader .= sprintf "# $_[0] --- Reconstructive Turning Points\n";
  $reconstturnheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
  "# Temperature","Stress","ConjToStress","Potential","Entropy","HeatCapacity";
  for (my $i=0;$i<$DOFSize;$i+=1)
  {
    $reconstturnheader .= sprintf $StrSPEC,"DOF $i";
  }
  $reconstturnheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . "\n",
  "NumNeg TFs","Rk 1 Convex","Blochwave";
  
  $stableheader .= sprintf "# Index " . ($_[1]+3) . "\n";
  $stableheader .= sprintf "# $_[0] --- Stable\n";
  $stableheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
  "# Temperature","Stress","ConjToStress","Potential","Entropy","HeatCapacity";
  for (my $i=0;$i<$DOFSize;$i+=1)
  {
    $stableheader .= sprintf $StrSPEC,"DOF $i";
  }
  $stableheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . "\n",
  "NumNeg TFs","Rk 1 Convex","Blochwave";
  
  $unstableheader .= sprintf "# Index " . ($_[1]+4) . "\n";
  $unstableheader .= sprintf "# $_[0] --- Unstable\n";
  $unstableheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
  "# Temperature","Stress","ConjToStress","Potential","Entropy","HeatCapacity";
  for (my $i=0;$i<$DOFSize;$i+=1)
  {
    $unstableheader .= sprintf $StrSPEC,"DOF $i";
  }
  $unstableheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . "\n",
  "NumNeg TFs","Rk 1 Convex","Blochwave";
  
  $firststable=1;
  $firstunstable=1;
  $nostable = 0;
  $nounstable = 0;
  $substable = 0;
  $subunstable = 0;
  if ($loadparam == 1)
  {
    $loadgrad = ($temp[1]-$temp[0])/abs($temp[1]-$temp[0]);
  }
  elsif ($loadparam == 2)
  {
    $loadgrad = ($stress[1]-$stress[0])/abs($stress[1]-$stress[0]);
  }
  
  while(defined($temp[0]))
  {
    if ($StabType eq "CB")
    {
      $stableflag = $noneg[0];
      if (defined($noneg[1])){ $NxtStableflag = $noneg[1];}
    }
    elsif ($StabType eq "phonon")
    {
      $stableflag = ($blochwave[0] != 1);
      if (defined($blochwave[1])){ $NxtStableflag = ($blochwave[1] != 1);}
    }
    elsif ($StabType eq "crystalline")
    {
      $stableflag = (($blochwave[0] != 1) || ($noneg[0]));
      if (defined($blochwave[1])){ $NxtStableflag = (($blochwave[1] != 1) || ($noneg[1]));}
    }
    
    
    $oldloadgrad = $loadgrad;
    if ($#temp > 0)
    {
      if ($loadparam == 1)
      {
        if ($temp[1] != $temp[0])
        {
          $loadgrad = ($temp[1]-$temp[0])/abs($temp[1]-$temp[0]);
        }
      }
      elsif ($loadparam == 2)
      {
        if ($stress[1] != $stress[0])
        {
          $loadgrad = ($stress[1]-$stress[0])/abs($stress[1]-$stress[0]);
        }
      }
    }
    
    # Bifurcation Point
    if ($bifpt[0] == 1)
    {
      if ($loadgrad == $oldloadgrad)
      {
        $bifpoints += 1;
        $biftmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
        $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
        for (my $i=0;$i<$DOFSize;$i+=1)
        {
          $biftmp .= sprintf $FSPEC,$DOF[0][$i];
        }
        $biftmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
        $noneg[0],$Convex[0],$blochwave[0];
      }
      else
      {
        $turnpoints += 1;
        $turntmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
        $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
        for (my $i=0;$i<$DOFSize;$i+=1)
        {
          $turntmp .= sprintf $FSPEC,$DOF[0][$i];
        }
        $turntmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
        $noneg[0],$Convex[0],$blochwave[0];
      }
    }
    else
    {
      if ($loadgrad != $oldloadgrad)
      {
        $reconstturnpts += 1;
        $reconstturntmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
        $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
        for (my $i=0;$i<$DOFSize;$i+=1)
        {
          $reconstturntmp .= sprintf $FSPEC,$DOF[0][$i];
        }
        $reconstturntmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
        $noneg[0],$Convex[0],$blochwave[0];
      }
    }
    
    if ($stableflag != $NxtStableflag)
    {
      # Add blank line in corresponding file to seperate segments
      # and connecting line of data
      if ($bifpt[0] == 1)
      {
        if ($NxtStableflag == 0)
        {
          if (!$firststable)
          {
            $stable .= sprintf "# name: Index_" . ($_[1]+3) . "_$substable\n";
            $stable .= sprintf "# type: matrix\n";
            $stable .= sprintf "# rows: $nostable\n";
            $stable .= sprintf "# columns: %i\n",$StateSize;
            $stable .= $stabletmp;
            $stable .= sprintf "\n";
            $substable += 1;
            $stabletmp = "";
            $nostable = 0;
          }
          else
          {
            $firststable=0;
          }
          $nostable +=1;
          $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
          $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
          for (my $i=0;$i<$DOFSize;$i+=1)
          {
            $stabletmp .= sprintf $FSPEC,$DOF[0][$i];
          }
          $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
          $noneg[0],$Convex[0],$blochwave[0];
        }
        elsif ($stableflag == 0)
        {
          if (!$firstunstable)
          {
            $unstable .= sprintf "# name: Index_" . ($_[1]+4). "_$subunstable\n";
            $unstable .= sprintf "# type: matrix\n";
            $unstable .= sprintf "# rows: $nounstable\n";
            $unstable .= sprintf "# columns: %i\n",$StateSize;
            $unstable .= $unstabletmp;
            $unstable .= sprintf "\n";
            $subunstable += 1;
            $unstabletmp = "";
            $nounstable = 0;
          }
          else
          {
            $firstunstable=0;
          }
          $nounstable += 1;
          $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
          $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
          for (my $i=0;$i<$DOFSize;$i+=1)
          {
            $unstabletmp .= sprintf $FSPEC,$DOF[0][$i];
          }
          $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
          $noneg[0],$Convex[0],$blochwave[0];
        }
      }
      elsif (($stableflag == 0) && ($bifpt[1] != 1))
      {
        if (!$firstunstable)
        {
          $unstable .= sprintf "# name: Index_" . ($_[1]+4). "_$subunstable\n";
          $unstable .= sprintf "# type: matrix\n";
          $unstable .= sprintf "# rows: $nounstable\n";
          $unstable .= sprintf "# columns: %i\n",$StateSize;
          $unstable .= $unstabletmp;
          $unstable .= sprintf "\n";
          $subunstable += 1;
          $unstabletmp = "";
          $nounstable = 0;
        }
        else
        {
          $firstunstable=0;
        }
        $nounstable += 1;
        $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
        $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
        for (my $i=0;$i<$DOFSize;$i+=1)
        {
          $unstabletmp .= sprintf $FSPEC,$DOF[0][$i];
        }
        $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
        $noneg[0],$Convex[0],$blochwave[0];
      }
    }
    
    # Print data line into correct file and continue
    if ($stableflag == 0)
    {
      $stable_nodata = 0;
      $firststable = 0;
      $nostable += 1;
      $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
      $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
      for (my $i=0;$i<$DOFSize;$i+=1)
      {
        $stabletmp .= sprintf $FSPEC,$DOF[0][$i];
      }
      $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
      $noneg[0],$Convex[0],$blochwave[0];
    }
    else
    {
      $unstable_nodata = 0;
      $firstunstable = 0;
      $nounstable += 1;
      $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
      $temp[0],$stress[0],$conjtostress[0],$potential[0],$entropy[0],$heatcapacity[0];
      for (my $i=0;$i<$DOFSize;$i+=1)
      {
        $unstabletmp .= sprintf $FSPEC,$DOF[0][$i];
      }
      $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
      $noneg[0],$Convex[0],$blochwave[0];
    }
    
    if ($stableflag != $NxtStableflag)
    {
      # Add blank line in corresponding file to seperate segments
      # and connecting line of data
      if ($bifpt[1] == 1)
      {
        if ($NxtStableflag == 0)
        {
          $nounstable += 1;
          $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
          $temp[1],$stress[1],$conjtostress[1],$potential[1],$entropy[1],$heatcapacity[1];
          for (my $i=0;$i<$DOFSize;$i+=1)
          {
            $unstabletmp .= sprintf $FSPEC,$DOF[1][$i];
          }
          $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
          $noneg[1],$Convex[1],$blochwave[1];
          
          if (!$firststable)
          {
            $stable .= sprintf "# name: Index_" . ($_[1]+3) . "_$substable\n";
            $stable .= sprintf "# type: matrix\n";
            $stable .= sprintf "# rows: $nostable\n";
            $stable .= sprintf "# columns: %i\n",$StateSize;
            $stable .= $stabletmp;
            $stable .= sprintf "\n";
            $substable += 1;
            $stabletmp = "";
            $nostable = 0;
          }
          else
          {
            $firststable=0;
          }
        }
        elsif ($stableflag == 0)
        {
          $nostable +=1;
          $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
          $temp[1],$stress[1],$conjtostress[1],$potential[1],$entropy[1],$heatcapacity[1];
          for (my $i=0;$i<$DOFSize;$i+=1)
          {
            $stabletmp .= sprintf $FSPEC,$DOF[1][$i];
          }
          $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
          $noneg[1],$Convex[1],$blochwave[1];
          
          if (!$firstunstable)
          {
            $unstable .= sprintf "# name: Index_" . ($_[1]+4). "_$subunstable\n";
            $unstable .= sprintf "# type: matrix\n";
            $unstable .= sprintf "# rows: $nounstable\n";
            $unstable .= sprintf "# columns: %i\n",$StateSize;
            $unstable .= $unstabletmp;
            $unstable .= sprintf "\n";
            $subunstable += 1;
            $unstabletmp = "";
            $nounstable = 0;
          }
          else
          {
            $firstunstable=0;
          }
        }
      }
      elsif (($NxtStableflag == 0) && ($bifpt[0] != 1))
      {
        $nounstable += 1;
        $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
        $temp[1],$stress[1],$conjtostress[1],$potential[1],$entropy[1],$heatcapacity[1];
        for (my $i=0;$i<$DOFSize;$i+=1)
        {
          $unstabletmp .= sprintf $FSPEC,$DOF[1][$i];
        }
        $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . "\n",
        $noneg[1],$Convex[1],$blochwave[1];
        
        if (!$firststable)
        {
          $stable .= sprintf "# name: Index_" . ($_[1]+3) . "_$substable\n";
          $stable .= sprintf "# type: matrix\n";
          $stable .= sprintf "# rows: $nostable\n";
          $stable .= sprintf "# columns: %i\n",$StateSize;
          $stable .= $stabletmp;
          $stable .= sprintf "\n";
          $substable += 1;
          $stabletmp = "";
          $nostable = 0;
        }
        else
        {
          $firststable=0;
        }
      }
    }
    
    shift(@bifpt);
    shift(@temp);
    shift(@stress);
    shift(@conjtostress);
    shift(@potential);
    shift(@entropy);
    shift(@heatcapacity);
    shift(@DOF);
    shift(@noneg);
    shift(@Convex);
    shift(@blochwave);
  }
  
  # Make sure there is at least one data point in each index
  if ($bifpoints == 0)
  {
    $bif .= sprintf "# name: Index_$_[1]_0\n";
    $bif .= sprintf "# type: matrix\n";
    $bif .= sprintf "# rows: 1\n";
    $bif .= sprintf "# columns: %i\n",$StateSize;
    for (my $i=0;$i<$StateSize;$i+=1)
    {
      $bif .= sprintf $FSPEC,0.0;
    }
    $bif .= sprintf "\n";
  }
  else
  {
    if ($bifpoints > 0)
    {
      $bif .= sprintf "# name: Index_$_[1]_0\n";
      $bif .= sprintf "# type: matrix\n";
      $bif .= sprintf "# rows: $bifpoints\n";
      $bif .= sprintf "# columns: %i\n",$StateSize;
      $bif .= $biftmp;
    }
  }
  
  if ($turnpoints == 0)
  {
    $turn .= sprintf "# name: Index_" . ($_[1]+1) ,"_0\n";
    $turn .= sprintf "# type: matrix\n";
    $turn .= sprintf "# rows: 1\n";
    $turn .= sprintf "# columns: %i\n",$StateSize;
    for (my $i=0;$i<$StateSize;$i+=1)
    {
      $turn .= sprintf $FSPEC,0.0;
    }
    $turn .= sprintf "\n";
  }
  else
  {
    if ($turnpoints > 0)
    {
      $turn .= sprintf "# name: Index_" . ($_[1]+1) . "_0\n";
      $turn .= sprintf "# type: matrix\n";
      $turn .= sprintf "# rows: $turnpoints\n";
      $turn .= sprintf "# columns: %i\n",$StateSize;
      $turn .= $turntmp;
    }
  }
  
  if ($reconstturnpts == 0)
  {
    $reconstturn .= sprintf "# name: Index_" . ($_[1]+2) . "_0\n";
    $reconstturn .= sprintf "# type: matrix\n";
    $reconstturn .= sprintf "# rows: 1\n";
    $reconstturn .= sprintf "# columns: %i\n",$StateSize;
    for (my $i=0;$i<$StateSize;$i+=1)
    {
      $reconstturn .= sprintf $FSPEC,0.0;
    }
    $reconstturn .= sprintf "\n";
  }
  else
  {
    if ($reconstturnpts > 0)
    {
      $reconstturn .= sprintf "# name: Index_" . ($_[1]+2) . "_0\n";
      $reconstturn .= sprintf "# type: matrix\n";
      $reconstturn .= sprintf "# rows: $reconstturnpts\n";
      $reconstturn .= sprintf "# columns: %i\n",$StateSize;
      $reconstturn .= $reconstturntmp;
    }
  }
  
  if ($stable_nodata)
  {
    $stable .= sprintf "# name: Index_" . ($_[1]+3) . "_$substable\n";
    $stable .= sprintf "# type: matrix\n";
    $stable .= sprintf "# rows: 1\n";
    $stable .= sprintf "# columns: %i\n",$StateSize;
    for (my $i=0;$i<$StateSize;$i+=1)
    {
      $stable .= sprintf $FSPEC,0.0;
    }
    $stable .= sprintf "\n";
  }
  else
  {
    if ($nostable > 0)
    {
      $stable .= sprintf "# name: Index_" . ($_[1]+3) . "_$substable\n";
      $stable .= sprintf "# type: matrix\n";
      $stable .= sprintf "# rows: $nostable\n";
      $stable .= sprintf "# columns: %i\n",$StateSize;
      $stable .= $stabletmp;
    }
  }
  
  if ($unstable_nodata)
  {
    $unstable .= sprintf "# name: Index_" . ($_[1]+4) . "_$subunstable\n";
    $unstable .= sprintf "# type: matrix\n";
    $unstable .= sprintf "# rows: 1\n";
    $unstable .= sprintf "# columns: %i\n",$StateSize;
    for (my $i=0;$i<$StateSize;$i+=1)
    {
      $unstable .= sprintf $FSPEC,0.0;
    }
    $unstable .= sprintf "\n";
  }
  else
  {
    if ($nounstable > 0)
    {
      $unstable .= sprintf "# name: Index_" . ($_[1]+4) . "_$subunstable\n";
      $unstable .= sprintf "# type: matrix\n";
      $unstable .= sprintf "# rows: $nounstable\n";
      $unstable .= sprintf "# columns: %i\n",$StateSize;
      $unstable .= $unstabletmp;
    }
  }
  
  printf $outputfl $bifheader . $bif . "\n\n" . $turnheader . $turn . "\n\n" . $reconstturnheader . $reconstturn . "\n\n" . $stableheader . $stable . "\n\n" . $unstableheader . $unstable . "\n\n";
}
