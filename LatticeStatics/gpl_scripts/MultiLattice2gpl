#!/usr/bin/perl -w
#!/usr/um/bin/perl -w
#
#

use Math::Trig;

if (scalar(@ARGV) < 3)
{
  die "Usage: MultiLattice2gpl dofs dataname gplfilename [crystalline|CB|phonon] [cartesian|euler] [directorie list]\n";
}

$DOFSize = $ARGV[0];
$StateSize = $DOFSize + 9;
$StrSPEC = "%14s";
$FSPEC = "%14.6f";

if (scalar(@ARGV) >= 4)
{
  $StabType = $ARGV[3];
}
else
{
  $StabType = "crystalline";
}

if (scalar(@ARGV) >= 5)
{
  if ($ARGV[4] eq "cartesian" || $ARGV[4] eq "Cartesian")
  {
    $Euler = 1;
  }
  else
  {
    $Euler = 0;
  }
}
else
{
  $Euler = 0;
}

if (scalar(@ARGV) <6)
{
  chomp($dataset=`pwd`);
  @dir = glob("./*");
}
else
{
  chomp($dataset=`pwd`);
  ($dummy,$dummy,$dummy,$dummy,$dummy,@dir) = @ARGV;
}
for (my $i=0;$i<@dir;$i+=1)
{
  if (-d $dir[$i])
  {
    push @directories, $dir[$i];
  }
}

open(GNUPLOT,">$ARGV[2]") 
    || die "Unable to open $ARGV[2] for write: $!";

print GNUPLOT "# gnuplot data file for ${dataset}\n#\n";
print GNUPLOT "# Index 0\n";
print GNUPLOT "# Bifurcation Points\n";
printf GNUPLOT "#" . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
    "Temperature","Stress","Potential","Entropy","HeatCapacity";
for (my $i=0;$i<$DOFSize;$i+=1)
{
    printf GNUPLOT $StrSPEC,"DOF $i";
}
printf GNUPLOT $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . "\n",
    "Min EigVal","Num Neg Eig Vals","Rank 1 Convex","Blochwave";
printf GNUPLOT "# name: Index_0_0\n";
printf GNUPLOT "# type: matrix\n";

$begingnuplot = "";
$endgnuplot = "";
$bifpoints = 0;
$index = 1;
foreach $dir (@directories)
{
  chdir $dataset;
  $bifpoints += loaddata($dataset . "/" . $dir ,$ARGV[1],\$begingnuplot,$index,\$endgnuplot);
  $index += 2;
}

if ($bifpoints == 0)
{
  printf GNUPLOT "# rows: 1\n";
  printf GNUPLOT "# columns: %i\n",$StateSize;
  for (my $i=0;$i<$StateSize;$i+=1)
  {
    printf GNUPLOT $FSPEC,0.0;
  }
  printf GNUPLOT "\n";
}
else
{
  printf GNUPLOT "# rows: $bifpoints\n";
  printf GNUPLOT "# columns: %i\n",$StateSize;
  print GNUPLOT $begingnuplot;
}

print GNUPLOT "\n\n", $endgnuplot;

close(GNUPLOT);


# Subroutine loaddata.
#    read in data file, print bifurcation points to output
#    file, print stable sections to "stable temp file",
#    print unstable sections to "unstable temp file".
#
# Note: subroutine leaves current directory changed.
#
# $_[0] -- Directory name
# $_[1] -- Data file name
# $_[2] -- reference to variable holding bif points
# $_[3] -- Gnuplot data file Index for stable section
#          Note (unstable section index +1)
# $_[4] -- reference to variable holding all stable and unstable
#          sections (indicies)
#
sub loaddata {
    my(@fields,@temp,,@stress,@DOF,
       @potential,@entropy,@heatcapacity,@mineigval,@noneg,@blochwave,
       $stableflag,$stable_nodata,$unstable_nodata,$bifpoints,$gridsize,
       $recalc,$BWrecalc);
    my($gnuplot,$endgnuplot,$stableheader,$unstableheader);
    $gnuplot = $_[2];
    $endgnuplot = $_[4];
    $stableheader = "";
    $stable = "";
    $stabletmp = "";
    $unstableheader = "";
    $unstable = "";
    $unstabletmp = "";

    my($firststable,$firstunstable);

    #chdir $_[0] || die "No $_[0] Directory, $!";
    chdir $_[0];

    # flag to make sure there is data in the index
    $stable_nodata = 1;
    $unstable_nodata = 1;
    $bifpoints = 0;

    if (-e $_[1])
    {
	open(DATA,"zcat -f $_[1]|") || die "No file, \"$_[0]\": $_[1], $!";

	$_ = <DATA>;
	while (! m/^Mode:/)
	{
	  if (/^Input File:BlochWaveGridSize/)
	  {
	    @fields=split(/=/,$_);
	    $gridsize = $fields[1];
	  }
	    $_ = <DATA>;
	}

	while (<DATA>)
	{
	    if ( /^Temperature/)
	    {
		@fields=split(/:/,$_);
		push(@temp,$fields[1]);
	    }

	    if ( /^Lambda/)
	    {
		@fields=split(/:/,$_);
		push(@stress,$fields[1]);
	    }

	    if ( /^DOF/)
	    {
		$_ = <DATA>;
		@fields = split;
		if ($Euler)
		{
		  my($i, $temp,@splt);
		  $temp = $_;
		  open(PRINC,"PrincipalSys $fields[0] $fields[1] $fields[2] $fields[3] $fields[4] $fields[5]|");
		  while (<PRINC>)
		  {
		    @splt = split;
		    for ($i=0;$i<6;$i=$i+1)
		    {
		      $fields[$i] = $splt[$i];
		    }
		  }
		  close(PRINC);
		  $_ = $temp;
		}
		push(@DOF,[ @fields ]);
	    }
	    
	    if (/^Potential/)
	    {
		@fields = split(/:/,$_);
		push(@potential,$fields[1]);
	    }

	    if ( /^Entropy/)
	    {
		@fields=split(/:/,$_);
		push(@entropy,$fields[1]);
	    }

	    if ( /^HeatCapacity/)
	    {
		@fields=split(/:/,$_);
		push(@heatcapacity,$fields[1]);
	    }
	    
	    if (/^Bifurcation/)
	    {
		@fields = split;
		push(@mineigval,$fields[2]);
		push(@noneg,$fields[3]);
	    }

	    if (/^Condensed Moduli Rank1Convex/)
	    {
		@fields = split(/:/,$_);
		push(@Convex,$fields[1]);
	    }

	    if (/^BlochWave/)
	    {
	      @fields = split(/:/,$_);
	      if ($fields[0] =~ /\(GridSize=([0-9]*)\)/)
	      {
		if ($1 != $gridsize)
		{
		  $recalc=1;
		}
		else
		{
		  $recalc=0;
		}
	      }
	      else
	      {
		$recalc=0;
	      }
	      $_ = $fields[1];
	      @fields = split(/,/,$_);
	      if ($recalc==1)
	      {
		push(@blochwave,$fields[0]);
		$BWrecalc=$fields[0];
	      }
	      else
	      {
		if (($noneg[@noneg-1]==0) && ($fields[0]==1) && defined($BWrecalc))
		{
		  push(@blochwave,$BWrecalc);
		}
		else
		{
		  push(@blochwave,$fields[0]);
		}
	      }
	    }
	}
	
	close(DATA);
    }
    else
    {
	print "No file, \"$_[1]\" in $_[0]!\n";
    }
    
    $stableheader .= sprintf "# Index $_[3]\n";
    $stableheader .= sprintf "# $_[0]/$_[1] --- Stable\n";
    $stableheader .= sprintf "#" . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
    "Temperature","Stress","Potential","Entropy","HeatCapacity";
    for (my $i=0;$i<$DOFSize;$i+=1)
    {
	$stableheader .= sprintf $StrSPEC,"DOF $i";
    }
    $stableheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . "\n",
    "Min EigVal","Num Neg Eig Vals","Rank 1 Convex","Blochwave";

    $unstableheader .= sprintf "# Index " . ($_[3]+1) . "\n";
    $unstableheader .= sprintf "# $_[0]/$_[1] --- Unstable\n";
    $unstableheader .= sprintf "#" . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC,
    "Temperature","Stress","Potential","Entropy","HeatCapacity";
    for (my $i=0;$i<$DOFSize;$i+=1)
    {
	$unstableheader .= sprintf $StrSPEC,"DOF $i";
    }
    $unstableheader .= sprintf $StrSPEC . $StrSPEC . $StrSPEC . $StrSPEC . "\n",
    "Min EigVal","Num Neg Eig Vals","Rank 1 Convex","Blochwave";
    
    $firststable=1;
    $firstunstable=1;
    $nostable = 0;
    $nounstable = 0;
    $substable = 0;
    $subunstable = 0;
    while(defined($temp[0]))
    {
      $CBflag=$noneg[0];
      if ($StabType eq "CB")
      {
	$stableflag = $noneg[0];
	if (defined($noneg[1])){ $NxtStableflag = $noneg[1];}
      }
      elsif ($StabType eq "phonon")
      {
	$stableflag = ($blochwave[0] != 1);
	if (defined($blochwave[1])){ $NxtStableflag = ($blochwave[1] != 1);}
      }
      elsif ($StabType eq "crystalline")
      {
	$stableflag = (($blochwave[0] != 1) || ($noneg[0]));
	if (defined($blochwave[1])){ $NxtStableflag = (($blochwave[1] != 1) || ($noneg[1]));}
      }


      # Bifurcation Point
      if (defined($noneg[1]) && $CBflag != $noneg[1])
      {
	$bifpoints += 1;
	$$gnuplot .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
	$temp[0],$stress[0],$potential[0],$entropy[0],$heatcapacity[0];
	for (my $i=0;$i<$DOFSize;$i+=1)
	{
	  $$gnuplot .= sprintf $FSPEC,$DOF[0][$i];
	}
	$$gnuplot .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . "\n",
	$mineigval[0],$noneg[0],$Convex[0],$blochwave[0];
      }
      
      if ($stableflag != $NxtStableflag)
      {
	# Add blank line in corresponding file to seperate segments
	# and connecting line of data
	if ($NxtStableflag == 0)
	{
	  if (!$firststable)
	  {
	    $stable .= sprintf "# name: Index_$_[3]_$substable\n";
	    $stable .= sprintf "# type: matrix\n";
	    $stable .= sprintf "# rows: $nostable\n";
	    $stable .= sprintf "# columns: %i\n",$StateSize;
	    $stable .= $stabletmp;
	    $stable .= sprintf "\n";
	    $substable += 1;
	    $stabletmp = "";
	    $nostable = 0;
	  }
	  else
	  {
	    $firststable=0;
	  }
	  $nostable +=1;
	  $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
	  $temp[0],$stress[0],$potential[0],$entropy[0],$heatcapacity[0];
	  for (my $i=0;$i<$DOFSize;$i+=1)
	  {
	    $stabletmp .= sprintf $FSPEC,$DOF[0][$i];
	  }
	  $stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . "\n",
	  $mineigval[0],$noneg[0],$Convex[0],$blochwave[0];
	}
	elsif ($stableflag == 0)
	{
	  if (!$firstunstable)
	  {
	    $unstable .= sprintf "# name: Index_" . ($_[3]+1). "_$subunstable\n";
	    $unstable .= sprintf "# type: matrix\n";
	    $unstable .= sprintf "# rows: $nounstable\n";
	    $unstable .= sprintf "# columns: %i\n",$StateSize;
	    $unstable .= $unstabletmp;
	    $unstable .= sprintf "\n";
	    $subunstable += 1;
	    $unstabletmp = "";
	    $nounstable = 0;
	  }
	  else
	  {
	    $firstunstable=0;
	  }
	  $nounstable += 1;
	  $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
	  $temp[0],$stress[0],$potential[0],$entropy[0],$heatcapacity[0];
	  for (my $i=0;$i<$DOFSize;$i+=1)
	  {
	    $unstabletmp .= sprintf $FSPEC,$DOF[0][$i];
	  }
	  $unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . "\n",
	  $mineigval[0],$noneg[0],$Convex[0],$blochwave[0];
	}
      }
      
      # Print data line into correct file and continue
      if ($stableflag == 0)
      {
	$stable_nodata = 0;
	$firststable = 0;
	$nostable += 1;
	$stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
	shift(@temp),shift(@stress),shift(@potential),shift(@entropy),shift(@heatcapacity);
	for (my $i=0;$i<$DOFSize;$i+=1)
	{
	  $stabletmp .= sprintf $FSPEC,$DOF[0][$i];
	}
	shift(@DOF);
	$stabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . "\n",
	shift(@mineigval),shift(@noneg),shift(@Convex),shift(@blochwave);
      }
      else
      {
	$unstable_nodata = 0;
	$firstunstable = 0;
	$nounstable += 1;
	$unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . $FSPEC,
	shift(@temp),shift(@stress),shift(@potential),shift(@entropy),shift(@heatcapacity);
	for (my $i=0;$i<$DOFSize;$i+=1)
	{
	  $unstabletmp .= sprintf $FSPEC,$DOF[0][$i];
	}
	shift(@DOF);
	$unstabletmp .= sprintf $FSPEC . $FSPEC . $FSPEC . $FSPEC . "\n",
	shift(@mineigval),shift(@noneg),shift(@Convex),shift(@blochwave);
      }
    }
    
    # Make sure there is at least one data point in each index
    if ($stable_nodata)
    {
      $stable .= sprintf "# name: Index_$_[3]_$substable\n";
      $stable .= sprintf "# type: matrix\n";
      $stable .= sprintf "# rows: 1\n";
      $stable .= sprintf "# columns: %i\n",$StateSize;
      for (my $i=0;$i<$StateSize;$i+=1)
      {
	$stable .= sprintf $FSPEC,0.0;
      }
      $stable .= sprintf "\n";
    }
    else
    {
      if ($nostable > 0)
      {
	$stable .= sprintf "# name: Index_$_[3]_$substable\n";
	$stable .= sprintf "# type: matrix\n";
	$stable .= sprintf "# rows: $nostable\n";
	$stable .= sprintf "# columns: %i\n",$StateSize;
	$stable .= $stabletmp;
      }
    }

    if ($unstable_nodata)
    {
      $unstable .= sprintf "# name: Index_" . ($_[3]+1) . "_$subunstable\n";
      $unstable .= sprintf "# type: matrix\n";
      $unstable .= sprintf "# rows: 1\n";
      $unstable .= sprintf "# columns: %i\n",$StateSize;
      for (my $i=0;$i<$StateSize;$i+=1)
      {
	$unstable .= sprintf $FSPEC,0.0;
      }
      $unstable .= sprintf "\n";
    }
    else
    {
      if ($nounstable > 0)
      {
	$unstable .= sprintf "# name: Index_" . ($_[3]+1) . "_$subunstable\n";
	$unstable .= sprintf "# type: matrix\n";
	$unstable .= sprintf "# rows: $nounstable\n";
	$unstable .= sprintf "# columns: %i\n",$StateSize;
	$unstable .= $unstabletmp;
      }
    }

    $$endgnuplot .= $stableheader . $stable . "\n\n" . $unstableheader . $unstable . "\n\n";

    $bifpoints;
}
