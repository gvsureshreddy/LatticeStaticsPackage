#!/usr/um/bin/perl 
#
#
# input u11 u12 u13 u22 u23 u33 <output>
#
#
# the components of u may be specified as
# expressions using a,b,c,d,e,f to correspond
# to the original 6 components
# i.e. to change U to 
#    --             --
#    | u11 -u12 -u13 |
#    | -u12 u22  u23 |
#    | -u13 u23  u33 |
#    --             --
# call symm_solution input \$a -\$b -\$c \$d \$e \$f output
#
# note: more complicated expresions may be used
#

if ( @ARGV == 8)
{
    open(OUTPUT,">$ARGV[7]") 
	|| die "Unable to open $ARGV[7] for write: $!";
    select OUTPUT
}

open(DATA,"<$ARGV[0]") 
    || die "Unable to open $ARGV[0] for read: $!";


#$_ = <DATA>;
while (<DATA>)
{
    if ( /^Input File: MainFieldWidth/ )
    {
        print $_;
	@fields=split(/=/,$_);
	$Width=eval($fields[1]);
    }
    elsif ( /^Input File: MainPrecision/ )
    {
        print $_;
	@fields=split(/=/,$_);
	$Prec=eval($fields[1]);
    }
    elsif ( /^Deformation/)
    {
	print $_;
	$_ = <DATA>;
	@U0 = split;
	$a=$U0[0];
	$b=$U0[1];
	$c=$U0[2];
	$_ = <DATA>;
	@U1 = split;
	$d=$U1[1];
	$e=$U1[2];
	$_ = <DATA>;
	@U2 = split;
	$f=$U2[2];

	$U0[0] = eval $ARGV[1];
	$U0[1] = eval $ARGV[2];
	$U0[2] = eval $ARGV[3];
	$U1[0] = $U0[1];
	$U1[1] = eval $ARGV[4];
	$U1[2] = eval $ARGV[5];
	$U2[0] = $U0[2];
	$U2[1] = $U1[2];
	$U2[2] = eval $ARGV[6];

        $format ="%${Width}.${Prec}f%${Width}.${Prec}f%${Width}.${Prec}f\n";
	printf $format,
	$U0[0],$U0[1],$U0[2];

	printf $format,
	$U1[0],$U1[1],$U1[2];

	printf $format,
	$U2[0],$U2[1],$U2[2];
    }
    else
    {
	print $_;
    }
}

close OUTPUT;
close DATA;
